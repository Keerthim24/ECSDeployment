AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  Stage:
    Type: String
    Default: dev
  GithubUserName:
    Type: String
    Default: Keerthim24
  GithubRepo:
    Type: String
    Default: https://github.com/Keerthim24/ECSDeployment.git
  GithubBranch:
    Type: String
    Default: master
  GithubOAuthToken:
    Type: String
    Default: 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
  ContainerPort:
    Type: Number
    Default: 8080

Resources:

  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'ecr-repository']]

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]

  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create the BuildProject with required Build information
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'BuildProject']]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: S3Bucket
    Properties: 
      ArtifactStore: 
        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
        Type: S3
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'CodePipeLine']]
      RestartExecutionOnUpdate: False
      RoleArn: 
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
        
      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId: 
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref BuildProject
            RunOrder: 1

        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
        - Name: DeploytoDev
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to Fargate-Cluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::Cloudformation/Fargate-Cluster.yml
            RunOrder: 1
        - Name: ApprovetoQA
          Actions:
          - Name: ManualApproval
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Version: 1
              Provider: Manual
        - Name: DeploytoQA
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to Fargate-Cluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::Cloudformation/Fargate-Cluster.yml
            RunOrder: 1
        - Name: ApprovetoUAT
          Actions:
          - Name: ManualApproval
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Version: 1
              Provider: Manual
        - Name: DeploytoUAT
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to Fargate-Cluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::Cloudformation/Fargate-Cluster.yml
            RunOrder: 1        
        - Name: ApprovetoProd
          Actions:
          - Name: ManualApproval
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Version: 1
              Provider: Manual
        - Name: DeployToPROD
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to Fargate-Cluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::Cloudformation/Fargate-Cluster.yml
            RunOrder: 1
            
          name: 'Deploy to Development'

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infrastructure/development
    steps:
      - uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_KEY }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve
      - name: Terraform Output
        id: output
        if: github.event_name == 'push'
        run: |
          web_client_bucket_dev=$(terraform output WEB_CLIENT_BUCKET_DEV)
          web_admin_bucket_dev=$(terraform output WEB_ADMIN_BUCKET_DEV)
          web_client_domain_dev=$(terraform output WEB_CLIENT_DOMAIN_DEV)
          web_admin_domain_dev=$(terraform output WEB_ADMIN_DOMAIN_DEV)
          ecr_repository_name=$(terraform output ECR_REPOSITORY_NAME_DEV)
          alb_domain_name=$(terraform output ALB_DOMAIN_NAME_DEV)
          echo "::set-output name=WEB_CLIENT_BUCKET_DEV::${web_client_bucket_dev}"
          echo "::set-output name=WEB_ADMIN_BUCKET_DEV::${web_admin_bucket_dev}"
          echo "::set-output name=WEB_CLIENT_DOMAIN_DEV::${web_client_domain_dev}"
          echo "::set-output name=WEB_ADMIN_DOMAIN_DEV::${web_admin_domain_dev}"
          echo "::set-output name=ECR_REPOSITORY_NAME_DEV::${ecr_repository_name}"
          echo "::set-output name=ALB_DOMAIN_NAME_DEV::${alb_domain_name}"
    outputs:
      WEB_CLIENT_DOMAIN_DEV: ${{ steps.output.outputs.WEB_CLIENT_DOMAIN_DEV }}
      WEB_ADMIN_DOMAIN_DEV: ${{ steps.output.outputs.WEB_ADMIN_DOMAIN_DEV }}
      WEB_CLIENT_BUCKET_DEV: ${{ steps.output.outputs.WEB_CLIENT_BUCKET_DEV }}
      WEB_ADMIN_BUCKET_DEV: ${{ steps.output.outputs.WEB_ADMIN_BUCKET_DEV }}
      ECR_REPOSITORY_NAME_DEV: ${{ steps.output.outputs.ECR_REPOSITORY_NAME_DEV }}
      ALB_DOMAIN_NAME_DEV: ${{ steps.output.outputs.ALB_DOMAIN_NAME_DEV }}
      build_api:
    name: 'Build API'
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.terraform.outputs.ECR_REPOSITORY_NAME_DEV }}
          IMAGE_TAG: latest
        run: |
          docker build -t "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" ./api
          docker push "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "::set-output name=image::${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
     
